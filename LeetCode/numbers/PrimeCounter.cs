using System.Diagnostics;

namespace LeetCode.numbers
{
    public class PrimeCounter
    {

        public PrimeCounter()
        {
            // Example usage

            int num = 102;
            //int count = CopilotCountPrimes(num);
            int count = CountPrimes(num);
            Debug.WriteLine($"Number of primes up to {num}: {count}");

        }

        #region Generated Code by Copilot

        /// <summary>
        /// generated by Copilot
        /// 计算1到n之间（包含n）有多少个质数
        /// </summary>
        /// <param name="n">上限整数</param>
        /// <returns>质数的数量</returns>
        public int CopilotCountPrimes(int n)
        {
            if (n < 2) return 0;
            int count = 0;
            for (int i = 2; i <= n; i++)
            {
                if (CopilotIsPrime(i)) count++;
            }
            return count;
        }


        /// <summary>
        /// generated by Copilot
        /// </summary>
        /// <param name="number"></param>
        /// <returns></returns>
        private bool CopilotIsPrime(int number)
        {
            if (number < 2) return false;
            if (number == 2) return true;
            if (number % 2 == 0) return false;
            int boundary = (int)Math.Sqrt(number);
            for (int i = 3; i <= boundary; i += 2)
            {
                if (number % i == 0) return false;
            }
            return true;
        }

        #endregion 


        private int CountPrimes(int n)
        {
            var count = 0;
            var isCompositeArr = new bool[n + 1]; // Initialize an array defaultd to prime (false)

            for (int i = 2; i < isCompositeArr.Length; i++)
            {
                if (!isCompositeArr[i])
                {
                    count++;

                    for (int j = i * i; j < isCompositeArr.Length; j += i)
                    {
                        isCompositeArr[j] = true; // Mark multiples of i as composite
                    }
                }
            }

            return count;
        }
    }
}
